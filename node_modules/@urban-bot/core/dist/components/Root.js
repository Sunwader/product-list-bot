"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const context_1 = require("../context");
const ErrorBoundary_1 = require("./ErrorBoundary");
const ManagerBot_1 = require("../ManagerBot/ManagerBot");
const expressApp_1 = require("../expressApp");
function Chat({ bot, children, isNewMessageEveryRender, chat, parseMode, $$managerBot, }) {
    const BotContext = context_1.getBotContext();
    return (react_1.default.createElement(BotContext.Provider, { value: { bot, isNewMessageEveryRender, chat, parseMode, $$managerBot } },
        react_1.default.createElement(ErrorBoundary_1.ErrorBoundary, null, children)));
}
function Root({ children, bot, sessionTimeSeconds = 60 * 60 * 24 * 7, isNewMessageEveryRender = true, parseMode, port = 8080, }) {
    // TODO get chats from $$managerBot?
    const [chats, setChats] = react_1.default.useState(new Map());
    const chatsRef = react_1.default.useRef(chats);
    chatsRef.current = chats;
    const timeoutIdsRef = react_1.default.useRef({});
    const [firstMessage, setFirstMessage] = react_1.default.useState();
    react_1.default.useEffect(() => {
        if (bot.initializeServer !== undefined) {
            const { app } = expressApp_1.getExpressApp(port);
            bot.initializeServer(app);
            expressApp_1.listen(port);
        }
    }, [port, bot]);
    const $$managerBot = react_1.default.useMemo(() => new ManagerBot_1.ManagerBot(bot), [bot]);
    react_1.default.useEffect(() => {
        function handler(message) {
            const { chat } = message;
            const { id: chatId } = chat;
            if (!chatsRef.current.has(chatId)) {
                chatsRef.current.set(chat.id, react_1.default.createElement(Chat, { bot: bot, "$$managerBot": $$managerBot, key: chatId, isNewMessageEveryRender: isNewMessageEveryRender, chat: chat, parseMode: parseMode }, children));
                $$managerBot.addChat(chatId);
                setChats(new Map(chatsRef.current));
                setFirstMessage(message);
            }
            clearTimeout(timeoutIdsRef.current[chatId]);
            timeoutIdsRef.current[chatId] = setTimeout(() => {
                chatsRef.current.delete(chatId);
                $$managerBot.deleteChat(chatId);
                setChats(new Map(chatsRef.current));
            }, sessionTimeSeconds * 1000);
        }
        $$managerBot.on('any', handler);
        return () => {
            $$managerBot.removeListener('any', handler);
        };
    }, [$$managerBot, sessionTimeSeconds, children, isNewMessageEveryRender, bot, parseMode]);
    react_1.default.useEffect(() => {
        if (firstMessage !== undefined) {
            // First message is needed to register chat and initialize react children for it.
            // After initializing we repeat this message that react children can process it.
            $$managerBot.emit('any', firstMessage);
            $$managerBot.emit(firstMessage.type, firstMessage);
        }
    }, [firstMessage, $$managerBot]);
    return (react_1.default.createElement(react_1.default.Fragment, null, Array.from(chats).map(([id, children]) => {
        return react_1.default.createElement("chat", { key: id }, children);
    })));
}
exports.Root = Root;
//# sourceMappingURL=Root.js.map