"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const hooks_1 = require("../hooks/hooks");
const getButtonsByButtonGroup_1 = require("../utils/getButtonsByButtonGroup");
const formatMarkupLanguageElement_1 = require("../utils/formatMarkupLanguageElement");
const getParseMode_1 = require("../utils/getParseMode");
function Location({ latitude, longitude, livePeriodSeconds, title, buttons: buttonGroupElement, isNewMessageEveryRender: isNewMessageEveryRenderProp, disableNotification, forceReply, parseMode, replyToMessageId, ...otherProps }) {
    const { $$managerBot, isNewMessageEveryRender: isNewMessageEveryRenderContext, chat, parseMode: parseModeContext, bot, } = hooks_1.useBotContext();
    const finalParseMode = getParseMode_1.getParseMode(title, parseMode, parseModeContext, bot.defaultParseMode);
    const formattedTitle = formatMarkupLanguageElement_1.formatMarkupLanguageElement(title, finalParseMode);
    const formattedButtons = getButtonsByButtonGroup_1.getButtonsByButtonGroup(buttonGroupElement);
    return (react_1.default.createElement("urban-location", { "$$managerBot": $$managerBot, chat: chat, isNewMessageEveryRender: isNewMessageEveryRenderProp !== null && isNewMessageEveryRenderProp !== void 0 ? isNewMessageEveryRenderProp : isNewMessageEveryRenderContext, data: {
            latitude,
            longitude,
            livePeriodSeconds,
            title: formattedTitle,
            buttons: formattedButtons,
            isReplyButtons: buttonGroupElement === null || buttonGroupElement === void 0 ? void 0 : buttonGroupElement.props.isReplyButtons,
            parseMode: finalParseMode,
            disableNotification,
            replyToMessageId,
            forceReply,
            ...otherProps,
        } }));
}
exports.Location = Location;
//# sourceMappingURL=Location.js.map