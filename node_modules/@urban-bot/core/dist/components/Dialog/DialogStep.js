"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const matchPattern_1 = require("../../utils/matchPattern");
const Text_1 = require("../Text");
const __1 = require("../..");
function DialogStep({ children, content, id, onNext, validation }) {
    const [isAnswered, setIsAnswered] = react_1.useState(false);
    const childrenArray = react_1.default.Children.toArray(children);
    const [displayedContent, setDisplayedContent] = react_1.useState(content);
    const { onFinish, finishedContent, addAnswer } = __1.useDialog();
    react_1.useEffect(() => {
        if (childrenArray.length === 0 && isAnswered && typeof children !== 'function') {
            // TODO call onFinish not inside useEffects
            onFinish();
            setDisplayedContent(finishedContent);
        }
    }, [childrenArray.length, isAnswered, finishedContent, onFinish, children]);
    async function handler(text) {
        if (isAnswered) {
            return;
        }
        const matchedChild = childrenArray.find((child) => child.props.match === undefined || matchPattern_1.matchPattern(text, child.props.match));
        if (validation !== undefined) {
            const validationError = await validation(text);
            if (validationError) {
                setDisplayedContent(react_1.default.createElement(Text_1.Text, { isNewMessageEveryRender: true }, validationError));
                return;
            }
        }
        if (childrenArray.length === 0 || matchedChild !== undefined || typeof children === 'function') {
            if (id !== undefined) {
                addAnswer(id, text);
            }
            setIsAnswered(true);
            onNext === null || onNext === void 0 ? void 0 : onNext(text);
        }
        if (typeof children === 'function') {
            setDisplayedContent(await children(text));
            return;
        }
        if (matchedChild !== undefined) {
            setDisplayedContent(matchedChild);
        }
    }
    __1.useText(({ text }) => handler(text));
    __1.useAction(({ actionId }) => handler(actionId));
    return react_1.default.createElement(react_1.default.Fragment, null, displayedContent);
}
exports.DialogStep = DialogStep;
//# sourceMappingURL=DialogStep.js.map