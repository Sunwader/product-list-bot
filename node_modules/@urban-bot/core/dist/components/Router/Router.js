"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const hooks_1 = require("../../hooks/hooks");
const useText_1 = require("../../hooks/useText");
const useCommand_1 = require("../../hooks/useCommand");
const context_1 = require("../../context");
const utils_1 = require("./utils");
let isCommandsInitialized = false;
function Router({ children, withInitializeCommands = false, historyLength = 5 }) {
    const { bot } = hooks_1.useBotContext();
    const history = react_1.useRef([]);
    const [activePath, setActivePath] = react_1.default.useState('');
    const childrenArray = react_1.default.Children.toArray(children);
    const navigate = react_1.useCallback((path) => {
        const newHistory = [...history.current, path];
        history.current = newHistory.length <= historyLength ? newHistory : newHistory.slice(1);
        setActivePath(path);
    }, [historyLength]);
    react_1.default.useEffect(() => {
        var _a;
        if (!withInitializeCommands || isCommandsInitialized) {
            return;
        }
        const commands = childrenArray
            .map((routes) => {
            return {
                command: routes.props.path,
                description: routes.props.description,
            };
        })
            .filter(({ command, description }) => typeof command === 'string' && command[0] === bot.commandPrefix && Boolean(description));
        (_a = bot.initializeCommands) === null || _a === void 0 ? void 0 : _a.call(bot, commands).then(() => {
            isCommandsInitialized = true;
        });
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    react_1.default.useEffect(() => {
        if (childrenArray.some(utils_1.matchChild('/'))) {
            navigate('/');
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []); // TODO check router children rerendering
    useCommand_1.useCommand(({ command }) => {
        if (childrenArray.some(utils_1.matchChild(command))) {
            navigate(command);
        }
    });
    useText_1.useText(({ text }) => {
        if (childrenArray.some(utils_1.matchChild(text))) {
            navigate(text);
        }
    });
    const component = childrenArray.find(utils_1.matchChild(activePath));
    const params = utils_1.getParams(activePath, component === null || component === void 0 ? void 0 : component.props.path);
    return (react_1.default.createElement(context_1.RouterContext.Provider, { value: { activePath, navigate, params, history: history.current } }, component));
}
exports.Router = Router;
//# sourceMappingURL=Router.js.map