"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const hooks_1 = require("../hooks/hooks");
const formatMarkupLanguageElement_1 = require("../utils/formatMarkupLanguageElement");
const getParseMode_1 = require("../utils/getParseMode");
function Text({ children, isNewMessageEveryRender: isNewMessageEveryRenderProp, parseMode, disableWebPagePreview, disableNotification, replyToMessageId, forceReply, ...otherProps }) {
    const { $$managerBot, isNewMessageEveryRender: isNewMessageEveryRenderContext, chat, parseMode: parseModeContext, bot, } = hooks_1.useBotContext();
    const finalParseMode = getParseMode_1.getParseMode(children, parseMode, parseModeContext, bot.defaultParseMode);
    const formattedText = formatMarkupLanguageElement_1.formatMarkupLanguageElement(children, finalParseMode);
    return (react_1.default.createElement("urban-text", { chat: chat, "$$managerBot": $$managerBot, isNewMessageEveryRender: isNewMessageEveryRenderProp !== null && isNewMessageEveryRenderProp !== void 0 ? isNewMessageEveryRenderProp : isNewMessageEveryRenderContext, data: {
            disableNotification,
            disableWebPagePreview,
            replyToMessageId,
            forceReply,
            parseMode: finalParseMode,
            text: formattedText,
            ...otherProps,
        } }));
}
exports.Text = Text;
//# sourceMappingURL=Text.js.map