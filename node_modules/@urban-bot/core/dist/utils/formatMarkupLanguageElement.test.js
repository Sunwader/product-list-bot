"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable react/jsx-key */
const react_1 = __importDefault(require("react"));
const formatMarkupLanguageElement_1 = require("./formatMarkupLanguageElement");
describe('formatMarkupLanguageElement', () => {
    describe('HTML', () => {
        test('plain text', () => {
            expect(formatMarkupLanguageElement_1.formatMarkupLanguageElement('text', formatMarkupLanguageElement_1.HTML_MODE)).toBe('text');
        });
        test('bold', () => {
            expect(formatMarkupLanguageElement_1.formatMarkupLanguageElement(react_1.default.createElement("b", null, "text"), formatMarkupLanguageElement_1.HTML_MODE)).toBe('<b>text</b>');
            expect(formatMarkupLanguageElement_1.formatMarkupLanguageElement(react_1.default.createElement("strong", null, "text"), formatMarkupLanguageElement_1.HTML_MODE)).toBe('<strong>text</strong>');
        });
        test('italic', () => {
            expect(formatMarkupLanguageElement_1.formatMarkupLanguageElement(react_1.default.createElement("i", null, "text"), formatMarkupLanguageElement_1.HTML_MODE)).toBe('<i>text</i>');
            expect(formatMarkupLanguageElement_1.formatMarkupLanguageElement(react_1.default.createElement("em", null, "text"), formatMarkupLanguageElement_1.HTML_MODE)).toBe('<em>text</em>');
        });
        test('underscore', () => {
            expect(formatMarkupLanguageElement_1.formatMarkupLanguageElement(react_1.default.createElement("u", null, "text"), formatMarkupLanguageElement_1.HTML_MODE)).toBe('<u>text</u>');
            expect(formatMarkupLanguageElement_1.formatMarkupLanguageElement(react_1.default.createElement("ins", null, "text"), formatMarkupLanguageElement_1.HTML_MODE)).toBe('<ins>text</ins>');
        });
        test('strikethrough', () => {
            expect(formatMarkupLanguageElement_1.formatMarkupLanguageElement(react_1.default.createElement("s", null, "text"), formatMarkupLanguageElement_1.HTML_MODE)).toBe('<s>text</s>');
            expect(formatMarkupLanguageElement_1.formatMarkupLanguageElement(react_1.default.createElement("strike", null, "text"), formatMarkupLanguageElement_1.HTML_MODE)).toBe('<strike>text</strike>');
            expect(formatMarkupLanguageElement_1.formatMarkupLanguageElement(react_1.default.createElement("del", null, "text"), formatMarkupLanguageElement_1.HTML_MODE)).toBe('<del>text</del>');
        });
        test('code', () => {
            expect(formatMarkupLanguageElement_1.formatMarkupLanguageElement(react_1.default.createElement("code", null, "text"), formatMarkupLanguageElement_1.HTML_MODE)).toBe('<code>text</code>');
        });
        test('q', () => {
            expect(formatMarkupLanguageElement_1.formatMarkupLanguageElement(react_1.default.createElement("q", null, "text"), formatMarkupLanguageElement_1.HTML_MODE)).toBe('<q>text</q>');
        });
        test('pre', () => {
            expect(formatMarkupLanguageElement_1.formatMarkupLanguageElement(react_1.default.createElement("pre", null, "text"), formatMarkupLanguageElement_1.HTML_MODE)).toBe('<pre>text</pre>');
        });
        test('br', () => {
            expect(formatMarkupLanguageElement_1.formatMarkupLanguageElement(react_1.default.createElement("br", null), formatMarkupLanguageElement_1.HTML_MODE)).toBe('\n');
        });
        test('link', () => {
            expect(formatMarkupLanguageElement_1.formatMarkupLanguageElement(react_1.default.createElement("a", { href: "http://www.example.com" }, "inline URL"), formatMarkupLanguageElement_1.HTML_MODE)).toBe('<a href="http://www.example.com">inline URL</a>');
        });
        it('throw error if tag does not exist', async () => {
            expect(() => 
            // eslint-disable-next-line @typescript-eslint/ban-ts-ignore
            // @ts-ignore
            formatMarkupLanguageElement_1.formatMarkupLanguageElement(react_1.default.createElement("not-exist-tag", null, "text"), formatMarkupLanguageElement_1.HTML_MODE)).toThrowErrorMatchingSnapshot();
            expect(() => {
                function Text() {
                    return null;
                }
                return formatMarkupLanguageElement_1.formatMarkupLanguageElement(react_1.default.createElement(Text, null), formatMarkupLanguageElement_1.HTML_MODE);
            }).toThrowErrorMatchingSnapshot();
        });
        test('react fragment', () => {
            expect(formatMarkupLanguageElement_1.formatMarkupLanguageElement(react_1.default.createElement(react_1.default.Fragment, null,
                react_1.default.createElement("b", null, "text"),
                react_1.default.createElement("b", null, "text2")), formatMarkupLanguageElement_1.HTML_MODE)).toBe('<b>text</b><b>text2</b>');
            expect(formatMarkupLanguageElement_1.formatMarkupLanguageElement(react_1.default.createElement(react_1.default.Fragment, null,
                react_1.default.createElement("b", null, "text"),
                react_1.default.createElement(react_1.default.Fragment, null,
                    react_1.default.createElement("b", null, "text2"),
                    " ",
                    react_1.default.createElement("b", null, "text3")),
                react_1.default.createElement("b", null, "text4")), formatMarkupLanguageElement_1.HTML_MODE)).toBe('<b>text</b><b>text2</b> <b>text3</b><b>text4</b>');
        });
        test('numbers', () => {
            expect(formatMarkupLanguageElement_1.formatMarkupLanguageElement(1, formatMarkupLanguageElement_1.HTML_MODE)).toBe('1');
            expect(formatMarkupLanguageElement_1.formatMarkupLanguageElement(NaN, formatMarkupLanguageElement_1.HTML_MODE)).toBe('NaN');
            expect(formatMarkupLanguageElement_1.formatMarkupLanguageElement([1, 2], formatMarkupLanguageElement_1.HTML_MODE)).toBe('12');
            expect(formatMarkupLanguageElement_1.formatMarkupLanguageElement([react_1.default.createElement("b", null, 1), react_1.default.createElement("b", null, 2)], formatMarkupLanguageElement_1.HTML_MODE)).toBe('<b>1</b><b>2</b>');
        });
        test('flat structure', () => {
            expect(formatMarkupLanguageElement_1.formatMarkupLanguageElement([react_1.default.createElement("b", null, "text"), react_1.default.createElement("b", null, "text2")], formatMarkupLanguageElement_1.HTML_MODE)).toBe('<b>text</b><b>text2</b>');
            expect(formatMarkupLanguageElement_1.formatMarkupLanguageElement([react_1.default.createElement("b", null, "text"), ' ', react_1.default.createElement("b", null, "text2")], formatMarkupLanguageElement_1.HTML_MODE)).toBe('<b>text</b> <b>text2</b>');
        });
        test('deep structure', () => {
            expect(formatMarkupLanguageElement_1.formatMarkupLanguageElement(react_1.default.createElement("b", null,
                "text ",
                react_1.default.createElement("b", null, "text2")), formatMarkupLanguageElement_1.HTML_MODE)).toBe('<b>text <b>text2</b></b>');
            expect(formatMarkupLanguageElement_1.formatMarkupLanguageElement([
                react_1.default.createElement("b", null,
                    "text ",
                    react_1.default.createElement("b", null, "text2")),
                ' ',
                react_1.default.createElement("b", null, "text2"),
            ], formatMarkupLanguageElement_1.HTML_MODE)).toBe('<b>text <b>text2</b></b> <b>text2</b>');
            expect(formatMarkupLanguageElement_1.formatMarkupLanguageElement([
                react_1.default.createElement("b", null,
                    "text ",
                    react_1.default.createElement("i", null, "text2")),
                ' ',
                react_1.default.createElement("b", null, "text2"),
            ], formatMarkupLanguageElement_1.HTML_MODE)).toBe('<b>text <i>text2</i></b> <b>text2</b>');
            expect(formatMarkupLanguageElement_1.formatMarkupLanguageElement(react_1.default.createElement("b", null,
                "bold",
                ' ',
                react_1.default.createElement("i", null,
                    "italic bold ",
                    react_1.default.createElement("s", null, "italic bold strikethrough"),
                    " ",
                    react_1.default.createElement("u", null, "underline italic bold")),
                ' ',
                "bold"), formatMarkupLanguageElement_1.HTML_MODE)).toBe('<b>bold <i>italic bold <s>italic bold strikethrough</s> <u>underline italic bold</u></i> bold</b>');
            expect(formatMarkupLanguageElement_1.formatMarkupLanguageElement(react_1.default.createElement("b", null,
                "bold",
                react_1.default.createElement("br", null),
                react_1.default.createElement("i", null,
                    "italic bold ",
                    react_1.default.createElement("s", null, "italic bold strikethrough"),
                    " ",
                    react_1.default.createElement("u", null, "underline italic bold")),
                react_1.default.createElement("br", null),
                "bold"), formatMarkupLanguageElement_1.HTML_MODE)).toBe('<b>bold\n<i>italic bold <s>italic bold strikethrough</s> <u>underline italic bold</u></i>\nbold</b>');
        });
    });
    describe('markdown', () => {
        test('plain text', () => {
            expect(formatMarkupLanguageElement_1.formatMarkupLanguageElement('text', formatMarkupLanguageElement_1.MARKDOWN_MODE)).toBe('text');
        });
        test('bold', () => {
            expect(formatMarkupLanguageElement_1.formatMarkupLanguageElement(react_1.default.createElement("b", null, "text"), formatMarkupLanguageElement_1.MARKDOWN_MODE)).toBe('*text*');
            expect(formatMarkupLanguageElement_1.formatMarkupLanguageElement(react_1.default.createElement("strong", null, "text"), formatMarkupLanguageElement_1.MARKDOWN_MODE)).toBe('*text*');
        });
        test('italic', () => {
            expect(formatMarkupLanguageElement_1.formatMarkupLanguageElement(react_1.default.createElement("i", null, "text"), formatMarkupLanguageElement_1.MARKDOWN_MODE)).toBe('_text_');
            expect(formatMarkupLanguageElement_1.formatMarkupLanguageElement(react_1.default.createElement("em", null, "text"), formatMarkupLanguageElement_1.MARKDOWN_MODE)).toBe('_text_');
        });
        test('underscore', () => {
            expect(formatMarkupLanguageElement_1.formatMarkupLanguageElement(react_1.default.createElement("u", null, "text"), formatMarkupLanguageElement_1.MARKDOWN_MODE)).toBe('text');
            expect(formatMarkupLanguageElement_1.formatMarkupLanguageElement(react_1.default.createElement("ins", null, "text"), formatMarkupLanguageElement_1.MARKDOWN_MODE)).toBe('text');
        });
        test('strikethrough', () => {
            expect(formatMarkupLanguageElement_1.formatMarkupLanguageElement(react_1.default.createElement("s", null, "text"), formatMarkupLanguageElement_1.MARKDOWN_MODE)).toBe('~text~');
            expect(formatMarkupLanguageElement_1.formatMarkupLanguageElement(react_1.default.createElement("strike", null, "text"), formatMarkupLanguageElement_1.MARKDOWN_MODE)).toBe('~text~');
            expect(formatMarkupLanguageElement_1.formatMarkupLanguageElement(react_1.default.createElement("del", null, "text"), formatMarkupLanguageElement_1.MARKDOWN_MODE)).toBe('~text~');
        });
        test('code', () => {
            expect(formatMarkupLanguageElement_1.formatMarkupLanguageElement(react_1.default.createElement("code", null, "text"), formatMarkupLanguageElement_1.MARKDOWN_MODE)).toBe('`text`');
        });
        test('pre', () => {
            expect(formatMarkupLanguageElement_1.formatMarkupLanguageElement(react_1.default.createElement("pre", null, "text"), formatMarkupLanguageElement_1.MARKDOWN_MODE)).toBe('```text```');
        });
        test('br', () => {
            expect(formatMarkupLanguageElement_1.formatMarkupLanguageElement(react_1.default.createElement("br", null), formatMarkupLanguageElement_1.MARKDOWN_MODE)).toBe('\n');
        });
        test('q', () => {
            expect(formatMarkupLanguageElement_1.formatMarkupLanguageElement(react_1.default.createElement("q", null, "text"), formatMarkupLanguageElement_1.MARKDOWN_MODE)).toBe('> text');
        });
        test('link', () => {
            expect(formatMarkupLanguageElement_1.formatMarkupLanguageElement(react_1.default.createElement("a", { href: "http://www.example.com" }, "inline URL"), formatMarkupLanguageElement_1.MARKDOWN_MODE)).toBe('<http://www.example.com|inline URL>');
        });
    });
    describe('not right parseMode', () => {
        test('throw error if parseMode does npt exist', () => {
            // eslint-disable-next-line @typescript-eslint/ban-ts-ignore
            // @ts-ignore
            expect(() => formatMarkupLanguageElement_1.formatMarkupLanguageElement(react_1.default.createElement("b", null, "text"), 'notRightParseMode')).toThrowErrorMatchingSnapshot();
        });
    });
});
//# sourceMappingURL=formatMarkupLanguageElement.test.js.map